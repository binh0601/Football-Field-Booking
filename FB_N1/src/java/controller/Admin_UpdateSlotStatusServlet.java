package controller;

import com.google.gson.Gson;
import dao.BookingDAO;
import dao.BookingDetailsDAO;
import dao.SlotsOfFieldDAO;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.Booking;
import model.BookingDetails;
import service.BookingService;
import websocket.AppWebSocket;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import model.SlotsOfField;

@WebServlet("/admin/update-slot-status")
public class Admin_UpdateSlotStatusServlet extends HttpServlet {

    private final Gson gson = new Gson();

    static class SlotStatusRequest {

        int slotFieldId;
        String slotDate;
        int status;
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        try {
            // 1. Parse JSON t·ª´ request
            SlotStatusRequest data = gson.fromJson(request.getReader(), SlotStatusRequest.class);

            int slotFieldId = data.slotFieldId;
            String slotDate = data.slotDate;
            int newStatusId = data.status;

            // 2. G·ªçi Service ƒë·ªÉ c·∫≠p nh·∫≠t
            BookingService bookingService = new BookingService();
            BookingDetailsDAO bookingDetailsDAO = new BookingDetailsDAO();
            BookingDetails bd = bookingDetailsDAO.getBySlotFieldAndDate(slotFieldId, slotDate);

            boolean updated = bookingService.updateStatus(bd.getBookingDetailsId(), newStatusId);

            // 3. Tr·∫£ v·ªÅ ph·∫£n h·ªìi
            Map<String, Object> result = new HashMap<>();
            result.put("success", updated);
            result.put("message", updated ? "C·∫≠p nh·∫≠t th√†nh c√¥ng!" : "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ca.");

            // 4. G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng n·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
            if (updated && bd.getBookingId() > 0) {
                int accid = bookingDetailsDAO.getAccountIdByBookingDetailId(bd.getBookingDetailsId());
                String accountId = String.valueOf(accid);

                try {
                    System.out.println("‚Üí B·∫Øt ƒë·∫ßu l·∫•y th√¥ng tin ca s√¢n v·ªõi slotFieldId = " + bd.getSlotFieldId());

                    SlotsOfFieldDAO slotDAO = new SlotsOfFieldDAO();
                    SlotsOfField slot = slotDAO.getSlotOfFieldById(bd.getSlotFieldId());

                    if (slot == null) {
                        System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y slot v·ªõi ID: " + bd.getSlotFieldId());
                        response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                        response.getWriter().write("{\"error\": \"Kh√¥ng t√¨m th·∫•y th√¥ng tin ca s√¢n.\"}");
                        return;
                    }

                    if (slot.getSlotInfo() == null) {
                        System.err.println("‚ùå SlotInfo null v·ªõi slotFieldId = " + slot.getSlotFieldId());
                    }

                    if (slot.getField() == null) {
                        System.err.println("‚ùå Field null v·ªõi slotFieldId = " + slot.getSlotFieldId());
                    }

                    String timeRange = slot.getSlotInfo().getStartTime() + " - " + slot.getSlotInfo().getEndTime();
                    String fieldName = slot.getField().getFieldName();
                    String dateStr = new SimpleDateFormat("dd/MM/yyyy")
                            .format(new SimpleDateFormat("yyyy-MM-dd").parse(bd.getSlotDate()));

                    System.out.println("‚úÖ Th√¥ng tin ƒë√£ l·∫•y ƒë∆∞·ª£c:");
                    System.out.println("  - Ca: " + timeRange);
                    System.out.println("  - S√¢n: " + fieldName);
                    System.out.println("  - Ng√†y: " + dateStr);
                    System.out.println("  - Tr·∫°ng th√°i m·ªõi: " + newStatusId);

                    String msg = switch (newStatusId) {
                        case 1 ->
                            "‚úÖ Ca " + timeRange + " t·∫°i s√¢n " + fieldName + " ng√†y " + dateStr + " c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n.";
                        case 2 ->
                            "‚åõ Ca " + timeRange + " t·∫°i s√¢n " + fieldName + " ng√†y " + dateStr + " ƒë√£ chuy·ªÉn v·ªÅ tr·∫°ng th√°i ch·ªù x·ª≠ l√Ω.";
                        case 3 ->
                            "‚ùå Ca " + timeRange + " t·∫°i s√¢n " + fieldName + " ng√†y " + dateStr + " ƒë√£ b·ªã hu·ª∑ b·ªüi qu·∫£n l√Ω.";
                        default ->
                            "‚ö†Ô∏è Ca " + timeRange + " t·∫°i s√¢n " + fieldName + " ng√†y " + dateStr + " ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.";
                    };

                    System.out.println("üì¢ G·ª≠i socket ƒë·∫øn accountId = " + accountId + " v·ªõi message: " + msg);
                    AppWebSocket.sendToAccount(accountId, "userMessage", msg);

                } catch (Exception e) {
                    System.err.println("‚ùå Exception khi x·ª≠ l√Ω th√¥ng b√°o:");
                    e.printStackTrace();
                    response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                    response.getWriter().write("{\"error\": \"L·ªói server trong qu√° tr√¨nh x·ª≠ l√Ω th√¥ng b√°o.\"}");
                }

            }

            response.getWriter().write(gson.toJson(result));

        } catch (Exception e) {
            e.printStackTrace(); // debug n·∫øu c·∫ßn
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            Map<String, Object> error = new HashMap<>();
            error.put("success", false);
            error.put("message", "L·ªói x·ª≠ l√Ω d·ªØ li·ªáu JSON.");
            response.getWriter().write(gson.toJson(error));
        }
    }
}
